version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Mapeo de protocolos
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      # Dos listeners: uno para dentro de Docker, otro para fuera
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      # Inter-broker en la red interna
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      # Extra
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  mongodb:
    image: mongo:6.0
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  flink-jobmanager:
    image: flink:1.17-scala_2.12
    container_name: flink-jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager

  flink-taskmanager:
    image: flink:1.17-scala_2.12
    container_name: flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager

  flink-jobrunner:
    build:
      context: .  # <--- build context = todo el repo
      dockerfile: docker/flink-jobrunner/Dockerfile
    container_name: flink-jobrunner
    depends_on:
      - kafka
      - mongodb
      - flink-jobmanager
    entrypoint: ["python", "/opt/flink/jobs/transform_flink_job.py"]  # Se ejecuta automÃ¡ticamente

  mongo-consumer:
    build:
      context: .
      dockerfile: docker/mongo-consumer/Dockerfile
    container_name: mongo-consumer
    depends_on:
      - kafka
      - mongodb
    restart: always

  flask-api:
    build:
      context: .
      dockerfile: docker/flask-api/Dockerfile
    container_name: flask-api
    ports:
      - "5000:5000"
    depends_on:
      - mongodb

volumes:
  mongo_data:
